{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,ADWA,ICXA,ADWA,IAAA,ECXA,GAAA,OAAA,CAAA,eAAA,CAAA;ADWA;ACTA,ADSA,ICTM,IAAI,GAAG,CDSb,GCTiB,MAAA,CAAA,IAAJ,CAAS;AAAC,ADgBrB,EChBqB,IAAI,EAAE,GDgB3B,GChBoB,CDgBpB,CAAoB,IAApB,EAAmC;AChBA,ADgBf,EChBe,GAAG,EAAE,EDgBpB,IAAA,GAAA,IAAA;AChBA,ADUpB,CCVW,CAAb;AAEA,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA;AAChB,EAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACD,CAFD;AAIA,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,YAAA;AACd,ADOA,ECPA,OAAO,ADOP,CCPQ,GAAR,CAAY,CDOZ,GAAwC,EAAxC,OCPA;AACD,ADQwC,CCVzC;AAKA,IAAI,CAAC,OAAL,CAAa,MAAb;ADOE,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,QAAJ,EAAoB;AAClB,WAAO,KAAK,IAAL,CAAU,QAAV,CAAP;AACD,GAFD;;AAIA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAqB;AACnB;;;;AAIA,IAAA,MAAM,CAAC,MAAP,CAAc,KAAK,IAAnB,EAAyB,MAAzB;AACD,GAND;;AAQA,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;AACtC,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AACD,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;AACvB,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB;;AAEA,QAAI,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,KAAoB,CAArC,EAAwC;AACtC;AACD;;AAED,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;AAAI,aAAA,QAAQ,EAAR;AAAU,KAAvC;AACD,GARD;;AASF,SAAA,IAAA;AApCA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\n  name?: string\n  age?: number\n}\n\n/**\n * Function that return nothing\n * () => {} ==> return an object\n */\ntype Callback = () => void\n\nexport class User {\n  /**\n   * This gonna be an empty object.\n   * Wich has eventually constraints on keys and values\n   */\n  events: { [key: string]: Callback[] } = {}\n\n  constructor(private data: UserProps) {}\n\n  get(propName: string): string | number {\n    return this.data[propName]\n  }\n\n  set(update: UserProps):void {\n    /**\n     * Take all data from 'update' and copy that\n     * in 'this.data' and overwite the old data in 'this.data'\n     */\n    Object.assign(this.data, update)\n  }\n\n  on(eventName: string, callback: Callback): void {\n    const handlers = this.events[eventName] || [] \n    handlers.push(callback)\n    this.events[eventName] = handlers\n  }\n\n  trigger(eventName: string): void {\n    const handlers = this.events[eventName]\n\n    if (!handlers || handlers.length === 0) {\n      return \n    }\n\n    handlers.forEach(callback => callback())\n  }\n}","import { User } from './models/User'\n\nconst user = new User({name: 'Test', age: 12})\n\nuser.on('change', () => {\n  console.log('Chang #1');  \n})\n\nuser.on('save', () => {\n  console.log('Hola quetal');\n})\n\n\nuser.trigger('save')\n"]}